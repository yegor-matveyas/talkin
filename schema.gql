# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthCredentials {
  accessToken: String!
  expiresAt: DateTime!
}

type Chat {
  chatId: UUID!
  chatType: ChatType!
  displayName: String!
  founder: User
  id: Int!
  lastUnreadMessage: Message
  members: [User!]!
  messages: [Message]!
  pinnedMessage: Message
}

type ChatRequest {
  id: Int!
  receiver: User!
  sender: User!
}

enum ChatType {
  DEFAULT
  GROUP
}

input CreateChatInput {
  chatType: ChatType!
  memberIds: [UUID!]!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  password: String!
  username: String!
}

type Message {
  chat: Chat!
  id: Int!
  messageId: UUID!
  messageType: MessageType!
  nodes: [MessageNode!]!
  sender: User!
  sentAt: DateTime!
}

type MessageNode {
  id: Int!
  link: String
  mention: User
  message: Message!
  nodeType: MessageNodeType!
  style: MessageNodeStyle
  text: String
}

input MessageNodeInput {
  link: String
  mentionId: UUID
  nodeType: MessageNodeType!
  style: MessageNodeStyle
  text: String
}

enum MessageNodeStyle {
  BOLD
  ITALIC
}

enum MessageNodeType {
  ATTACHMENT
  EVENT
  LINK
  MENTION
  TEXT
}

enum MessageType {
  ATTACHMENT
  EVENT
  TEXT
}

type Mutation {
  createChat(createChatInput: CreateChatInput!): Chat!
  createUser(createUserInput: CreateUserInput!): User!
  login(loginInput: LoginInput!): AuthCredentials!
  logout: Boolean!
  refreshTokens: AuthCredentials!
  sendChatRequest(sendChatRequestInput: SendChatRequestInput!): ChatRequest!
  sendMessage(sendMessageInput: SendMessageInput!): Message!
  signUp(signUpInput: SignUpInput!): AuthCredentials!
}

type Query {
  me: User!
  user(where: UserWhereUniqueInput!): User!
  users(where: UsersWhereInput): [User!]
}

input SendChatRequestInput {
  receiverId: UUID!
  senderId: UUID!
}

input SendMessageInput {
  chatId: UUID!
  nodes: [MessageNodeInput!]!
  senderId: UUID!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

"""A simple UUID parser"""
scalar UUID

type User {
  chatExists: Boolean!
  chats: [Chat!]
  currentChat: Chat
  email: String!
  id: Int!
  receivedChatRequests: [ChatRequest!]!
  requestSent: Boolean!
  sentChatRequests: [ChatRequest!]!
  userId: UUID!
  username: String!
}

input UserWhereUniqueInput {
  userId: UUID!
}

input UsersWhereInput {
  username: String
}